# apiVersion: v1
# kind: Namespace
# metadata:
#   name: local-path-storage
# ---
apiVersion: v1
kind: Namespace
metadata:
  name: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-path-provisioner-service-account
  namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-path-provisioner-role
rules:
- apiGroups: [""]
  resources: ["nodes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["endpoints", "persistentvolumes", "pods"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: kubeflow
---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: local-path-provisioner
#   namespace: local-path-storage
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: local-path-provisioner
#   template:
#     metadata:
#       labels:
#         app: local-path-provisioner
#     spec:
#       serviceAccountName: local-path-provisioner-service-account
#       containers:
#       - name: local-path-provisioner
#         image: rancher/local-path-provisioner:v0.0.11
#         imagePullPolicy: IfNotPresent
#         command:
#         - local-path-provisioner
#         - --debug
#         - start
#         - --config
#         - /etc/config/config.json
#         volumeMounts:
#         - name: config-volume
#           mountPath: /etc/config/
#         env:
#         - name: POD_NAMESPACE
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.namespace
#       volumes:
#         - name: config-volume
#           configMap:
#             name: local-path-config
#       tolerations:
#        - operator: "Exists"
# ---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-path
  annotations: {
  "storageclass.kubernetes.io/is-default-class":"true"
  }
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: local-path-config
  namespace: kubeflow
data:
  config.json: |-
        {
                "nodePathMap":[
                {
                        "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                        "paths":["/opt/local-path-provisioner"]
                }
                ]
        }
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume1
spec:
  storageClassName: local-path
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv1"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume2
spec:
  storageClassName: local-path
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv2"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume3
spec:
  storageClassName: local-path
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv3"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume4
spec:
  storageClassName: local-path
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv4"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume5
spec:
  storageClassName: local-path
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv5"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-volume6
spec:
  storageClassName: local-path
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/pv6"
---      
# {"apiVersion":"v1","kind":"PersistentVolume","metadata":{"annotations":{},"name":"pv01"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"50Gi"},"nfs":{"path":"/data02","server":"192.168.28.138"},"persistentVolumeReclaimPolicy":"Recycle","storageClassName":"nfs"}}
